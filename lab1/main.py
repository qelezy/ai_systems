import sys
from PySide6.QtWidgets import QApplication, QMainWindow, QFileDialog, QMessageBox, QHeaderView
from PySide6.QtUiTools import QUiLoader
from PySide6.QtCore import QFile, Qt, QAbstractTableModel, QModelIndex
from PySide6.QtGui import QColor
from rule_parser import RuleParser


class RulesTableModel(QAbstractTableModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    
    def __init__(self, rules=None):
        super().__init__()
        self.rules = rules or []
        self.headers = ["‚Ññ", "–£—Å–ª–æ–≤–∏—è", "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]
    
    def rowCount(self, parent=QModelIndex()):
        return len(self.rules)
    
    def columnCount(self, parent=QModelIndex()):
        return len(self.headers)
    
    def data(self, index, role=Qt.ItemDataRole.DisplayRole):
        if not index.isValid() or index.row() >= len(self.rules):
            return None
        
        rule = self.rules[index.row()]
        
        if role == Qt.ItemDataRole.DisplayRole:
            if index.column() == 0:  # –ù–æ–º–µ—Ä
                return str(index.row() + 1)
            elif index.column() == 1:  # –£—Å–ª–æ–≤–∏—è
                return self.format_conditions(rule.conditions)
            elif index.column() == 2:  # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
                return self.format_logical_operators(rule.logical_operators)
            elif index.column() == 3:  # –†–µ–∑—É–ª—å—Ç–∞—Ç
                return f"{rule.result_object} = {rule.result_value}"
        
        return None
    
    def headerData(self, section, orientation, role=Qt.ItemDataRole.DisplayRole):
        if role == Qt.ItemDataRole.DisplayRole and orientation == Qt.Orientation.Horizontal:
            return self.headers[section]
        return None
    
    def format_conditions(self, conditions):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not conditions:
            return ""
        
        formatted = []
        for condition in conditions:
            formatted.append(f"{condition.object_name} {condition.operator.value} {condition.value}")
        
        return "\n".join(formatted)
    
    def format_logical_operators(self, operators):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not operators:
            return "–ù–µ—Ç"
        
        return " ".join([op.value for op in operators])
    
    def update_rules(self, rules):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤ –º–æ–¥–µ–ª–∏"""
        self.beginResetModel()
        self.rules = rules
        self.endResetModel()


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.load_ui()
    
    def load_ui(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç UI —Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        ui_file = QFile("mainwindow.ui")
        if not ui_file.open(QFile.ReadOnly):
            print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª {ui_file.fileName()}")
            return
        
        loader = QUiLoader()
        self.ui = loader.load(ui_file, self)
        ui_file.close()
        
        if self.ui is None:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å UI —Ñ–∞–π–ª")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π UI –∫–∞–∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.setCentralWidget(self.ui.centralwidget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã League of Legends")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.resize(800, 600)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –ø—Ä–∞–≤–∏–ª
        self.rule_parser = RuleParser()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞
        self.rules = self.rule_parser.parse_rules_from_file("rules.txt")
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.rules)} –ø—Ä–∞–≤–∏–ª –∏–∑ —Ñ–∞–π–ª–∞ rules.txt")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        self.test_loaded_rules()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.setup_ui_connections()
        self.setup_rules_table()

    def test_loaded_rules(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞ rules.txt"""
        print("\n" + "=" * 60)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –ü–†–ê–í–ò–õ –ò–ó RULES.TXT")
        print("=" * 60)
        
        if not self.rules:
            print("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.rules)} –ø—Ä–∞–≤–∏–ª")
        print("\n–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞:")
        print("-" * 50)
        
        for i, rule in enumerate(self.rules, 1):
            print(f"\nüìã –ü—Ä–∞–≤–∏–ª–æ {i}:")
            print(f"   –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {rule}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            print(f"   –£—Å–ª–æ–≤–∏—è ({len(rule.conditions)}):")
            for j, condition in enumerate(rule.conditions, 1):
                print(f"     {j}. {condition.object_name} {condition.operator.value} {condition.value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            if rule.logical_operators:
                print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã ({len(rule.logical_operators)}):")
                for j, op in enumerate(rule.logical_operators, 1):
                    print(f"     {j}. {op.value}")
            else:
                print("   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: –Ω–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"     –û–±—ä–µ–∫—Ç: '{rule.result_object}'")
            print(f"     –ó–Ω–∞—á–µ–Ω–∏–µ: '{rule.result_value}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞
            self.validate_rule_parsing(rule, i)
        
        print("\n" + "=" * 60)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60)

    def validate_rule_parsing(self, rule, rule_number):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞"""
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–π
        if not rule.result_object or rule.result_object.strip() == "":
            print(f"     ‚ùå –û–®–ò–ë–ö–ê: –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        else:
            print(f"     ‚úÖ –û–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: '{rule.result_object}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not rule.result_value or rule.result_value.strip() == "":
            print(f"     ‚ùå –û–®–ò–ë–ö–ê: –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        else:
            print(f"     ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{rule.result_value}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        for j, condition in enumerate(rule.conditions, 1):
            if not condition.object_name or condition.object_name.strip() == "":
                print(f"     ‚ùå –û–®–ò–ë–ö–ê: –ü—É—Å—Ç–æ–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –≤ —É—Å–ª–æ–≤–∏–∏ {j}")
            elif not condition.value or condition.value.strip() == "":
                print(f"     ‚ùå –û–®–ò–ë–ö–ê: –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É—Å–ª–æ–≤–∏–∏ {j}")
            else:
                print(f"     ‚úÖ –£—Å–ª–æ–≤–∏–µ {j} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {condition.object_name} {condition.operator.value} {condition.value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ª–æ–≤–∏–π –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        expected_operators = len(rule.conditions) - 1
        actual_operators = len(rule.logical_operators)
        if expected_operators != actual_operators:
            print(f"     ‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_operators}, –Ω–∞–π–¥–µ–Ω–æ {actual_operators})")
        else:
            print(f"     ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {actual_operators}")

    def setup_ui_connections(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤ –¥–ª—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª
        self.ui.loadRulesBtn.clicked.connect(self.load_rules_from_file)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏)
        self.ui.addRuleBtn.clicked.connect(self.add_rule)
        self.ui.deleteRuleBtn.clicked.connect(self.delete_rule)
        self.ui.saveRulesBtn.clicked.connect(self.save_rules)
        self.ui.recommendItemBtn.clicked.connect(self.recommend_item)

    def setup_rules_table(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
        self.rules_model = RulesTableModel(self.rules)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.ui.rulesBaseTable.setModel(self.rules_model)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        header = self.ui.rulesBaseTable.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)  # –ù–æ–º–µ—Ä - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)  # –£—Å–ª–æ–≤–∏—è - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)  # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)  # –†–µ–∑—É–ª—å—Ç–∞—Ç - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        self.ui.rulesBaseTable.setColumnWidth(0, 50)  # –ù–æ–º–µ—Ä
        self.ui.rulesBaseTable.setColumnWidth(2, 150)  # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.ui.rulesBaseTable.verticalHeader().setDefaultSectionSize(60)

    def display_rules_in_table(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if hasattr(self, 'rules_model'):
            self.rules_model.update_rules(self.rules)

    def load_rules_from_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏",
            "",
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        
        if not file_path:
            return
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞
            self.rules = self.rule_parser.parse_rules_from_file(file_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.display_rules_in_table()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö",
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.rules)} –ø—Ä–∞–≤–∏–ª –∏–∑ —Ñ–∞–π–ª–∞:\n{file_path}"
            )
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.rules)} –ø—Ä–∞–≤–∏–ª –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            
        except Exception as e:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞:\n{str(e)}"
            )
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

    def add_rule(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ (–∑–∞–≥–ª—É—à–∫–∞)"""
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def delete_rule(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ (–∑–∞–≥–ª—É—à–∫–∞)"""
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def save_rules(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤ —Ñ–∞–π–ª (–∑–∞–≥–ª—É—à–∫–∞)"""
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def recommend_item(self):
        """–í—ã–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = MainWindow()
    window.show()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
